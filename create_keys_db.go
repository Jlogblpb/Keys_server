package main

import (
	"database/sql"
	"fmt"
	"log"

	_ "github.com/mattn/go-sqlite3"
)

// Данные из массивов

var streets = []string{
	"героев сталинграда", "пролетарская", "бульвар энгельса",
	"остравская", "гражданская", "доценко", "удмуртская", "гремячинская", "караванная",
	"2 караванная", "светлояпская", "2 штурманская", "николаевская", "танеева", "брестская",
	"мачтозаводская", "олимпийская", "пятиморская", "40 лет влксм", "столетова", "якуба коласа",
	"фадеева", "марийская", "2 динамовская", "гагринская", "панферова", "зерноградская",
	"саушинская", "50 лет октября", "водников", "лазоревая", "минская", "сулейманова",
	"фролова", "черепановых", "обводной", "петропавловская", "изобильная", "тельмана",
	"бахтурова", "вучетича", "голубева", "ломакина", "канатчиков", "российская", "луговая",
}

var kampus = []string{
	"МКУ-100", "МКУ-101", "МКУ-102", "МКУ-103", "МКУ-104", "МКУ-105",
	"МКУ-106", "МКУ-107", "МКУ-108", "МКУ-109", "МКУ-110", "МКУ-111", "МКУ-112", "МКУ-113",
	"МКУ-114", "МКУ-115", "МКУ-116", "МКУ-117", "МКУ-118", "МКУ-119", "МКУ-120", "МКУ-121",
}

var keysArr = []string{
	"1.3", "4", "12", "13", "14", "53", "65", "70", "79", "93", "94", "96",
	"102", "106", "109", "111", "112", "113", "119", "120", "123", "128", "131", "132", "135",
	"138", "140", "146", "147", "148", "152", "157", "158", "168", "169", "170", "171", "181",
	"182", "183", "185", "188", "195", "212", "367", "445", "476", "481", "МегаКот", "K",
	"Индивидуальный", "Амбарные", "Спец", "любой ключ", "136", "Мега Кот", "162", "128/157",
	"146/147", "Коламбийские", "130",
}

var commentsArr = []string{
	"", "171 кл", "102, 103 МКУ-113кл ДШ", "Подходит 113 кл от МКУ-103, 102",
	"6 под. ключи у охраны по удостоверению", "Подходит от Энгельса 14",
	"Подходит 157 кл МКУ-113", "Подходит любой ключ", "Подходит 181 кл от МКУ-114",
	"Подходит 152 кл от МКУ-116", "Подходит 170 кл от МКУ-118", "69 кл", "157 кл",
	"Подходит 148 кл от МКУ-119", "332 кл от дополнительного ДШ", "Подходит 111 кл от МКУ-112",
	"Подходит 0160 кл от МКУ-112", "Подъезды 6, 10, 13 Спец", "Подходит 158 от МКУ-115",
	"188, 185, 121, 0182", "2-й подъезд с нулем", "ключ с нулем", "5-й подъезд с нулем", "185 кл 2-й подъезд",
}

// Основной массив адресов: каждая запись в формате:
// {street_id, house, corpus, key_id, kampus_id, comment_id}
var addresses = [457][6]int{
	{0, 47, 0, 36, 0, 0},
	{0, 49, 0, 16, 0, 1},
	{1, 11, 0, 36, 0, 0},
	{1, 13, 0, 36, 0, 0},
	{1, 15, 0, 36, 0, 0},
	{1, 17, 0, 36, 0, 0},
	{1, 19, 0, 36, 0, 0},
	{1, 21, 0, 36, 0, 0},
	{1, 23, 0, 36, 0, 0},
	{1, 25, 0, 36, 0, 0},
	{1, 27, 0, 36, 0, 0},
	{1, 29, 0, 36, 0, 0},
	{1, 31, 0, 36, 0, 0},
	{1, 33, 0, 36, 0, 0},
	{1, 35, 0, 36, 0, 0},
	{1, 39, 0, 36, 0, 0},
	{1, 41, 0, 36, 0, 0},
	{1, 45, 0, 36, 0, 0},
	{0, 39, 0, 8, 1, 0},
	{0, 41, 0, 8, 1, 0},
	{0, 45, 0, 8, 1, 0},
	{2, 2, 0, 8, 1, 0},
	{2, 2, 1, 8, 1, 0},
	{2, 4, 0, 39, 1, 0},
	{2, 4, 1, 8, 1, 0},
	{2, 8, 0, 8, 1, 0},
	{2, 10, 0, 8, 1, 0},
	{2, 14, 0, 50, 1, 0},
	{2, 16, 0, 48, 1, 0},
	{2, 18, 0, 48, 1, 0},
	{0, 23, 0, 17, 2, 0},
	{0, 25, 0, 17, 2, 0},
	{0, 29, 0, 9, 2, 0},
	{0, 35, 0, 49, 2, 0},
	{0, 37, 0, 49, 2, 0},
	{3, 8, 0, 50, 2, 2},
	{3, 12, 0, 17, 2, 0},
	{3, 16, 0, 17, 2, 0},
	{2, 9, 0, 17, 2, 0},
	{2, 11, 0, 17, 2, 0},
	{2, 15, 0, 17, 2, 0},
	{2, 17, 0, 17, 2, 0},
	{2, 19, 0, 17, 2, 0},
	{2, 23, 0, 17, 2, 0},
	{2, 25, 0, 17, 2, 0},
	{0, 21, 0, 47, 3, 0},
	{3, 2, 0, 54, 3, 0},
	{3, 4, 0, 17, 3, 0},
	{3, 6, 0, 17, 3, 0},
	{3, 10, 0, 17, 3, 0},
	{3, 14, 0, 17, 3, 2},
	{3, 18, 0, 17, 3, 0},
	{3, 20, 0, 17, 3, 0},
	{3, 20, 1, 17, 3, 0},
	{2, 1, 0, 17, 3, 0},
	{2, 3, 0, 17, 3, 0},
	{4, 52, 0, 20, 4, 0},
	{4, 56, 0, 20, 4, 0},
	{4, 58, 0, 20, 4, 0},
	{4, 62, 0, 20, 4, 0},
	{5, 35, 0, 20, 4, 0},
	{5, 35, 1, 13, 4, 0},
	{5, 37, 0, 20, 4, 0},
	{5, 39, 0, 20, 4, 0},
	{5, 41, 0, 20, 4, 0},
	{5, 43, 0, 20, 4, 0},
	{5, 68, 0, 20, 4, 0},
	{5, 68, 1, 20, 4, 0},
	{5, 74, 0, 20, 4, 0},
	{5, 76, 0, 20, 4, 0},
	{5, 78, 0, 20, 4, 0},
	{5, 80, 0, 20, 4, 0},
	{35, 2, 0, 20, 4, 0},
	{36, 87, 0, 20, 4, 0},
	{36, 87, 1, 20, 4, 0},
	{36, 89, 0, 20, 4, 0},
	{36, 91, 0, 20, 4, 0},
	{0, 50, 0, 55, 5, 0},
	{0, 52, 0, 55, 5, 0},
	{0, 54, 0, 55, 5, 0},
	{0, 56, 0, 55, 5, 0},
	{0, 60, 0, 55, 5, 0},
	{0, 62, 0, 43, 5, 0},
	{4, 34, 0, 11, 5, 0},
	{1, 47, 0, 55, 5, 0},
	{1, 49, 0, 55, 5, 0},
	{1, 51, 1, 55, 5, 0},
	{1, 51, 2, 52, 5, 0},
	{1, 53, 0, 55, 5, 0},
	{1, 55, 0, 55, 5, 0},
	{2, 22, 0, 51, 5, 0},
	{2, 24, 0, 51, 5, 0},
	{2, 26, 0, 51, 5, 0},
	{2, 28, 0, 47, 5, 0},
	{4, 14, 0, 48, 6, 0},
	{4, 16, 0, 48, 6, 0},
	{4, 18, 0, 48, 6, 0},
	{4, 20, 0, 48, 6, 0},
	{4, 22, 0, 48, 6, 3},
	{4, 24, 0, 48, 6, 0},
	{4, 26, 0, 48, 6, 0},
	{4, 28, 0, 48, 6, 0},
	{37, 22, 0, 48, 6, 0},
	{2, 28, 5, 52, 6, 0},
	{2, 32, 0, 47, 6, 0},
	{2, 33, 1, 55, 6, 0},
	{2, 34, 0, 14, 6, 0},
	{2, 34, 5, 55, 6, 0},
	{2, 35, 0, 52, 6, 0},
	{2, 35, 1, 55, 6, 0},
	{2, 36, 0, 55, 6, 0},
	{37, 12, 0, 48, 6, 0},
	{0, 38, 0, 1, 7, 4},
	{0, 40, 0, 17, 7, 0},
	{0, 42, 0, 1, 7, 0},
	{0, 44, 0, 1, 7, 0},
	{0, 48, 0, 1, 7, 0},
	{37, 4, 0, 1, 7, 0},
	{37, 6, 0, 1, 7, 0},
	{37, 14, 0, 1, 7, 0},
	{38, 14, 0, 1, 7, 0},
	{38, 19, 0, 1, 7, 0},
	{2, 26, 1, 52, 7, 0},
	{2, 27, 0, 1, 7, 0},
	{2, 29, 0, 1, 7, 0},
	{2, 31, 0, 1, 7, 0},
	{2, 31, 1, 1, 7, 0},
	{28, 20, 0, 34, 8, 0},
	{28, 22, 0, 34, 8, 0},
	{28, 24, 0, 34, 8, 0},
	{28, 28, 0, 56, 8, 0},
	{28, 30, 0, 55, 8, 0},
	{39, 1, 0, 34, 8, 0},
	{40, 5, 0, 34, 8, 0},
	{40, 5, 1, 34, 8, 0},
	{40, 19, 0, 34, 8, 0},
	{41, 1, 1, 34, 8, 0},
	{41, 3, 0, 34, 8, 0},
	{41, 4, 0, 34, 8, 0},
	{41, 6, 0, 34, 8, 0},
	{41, 8, 0, 34, 8, 0},
	{41, 12, 0, 34, 8, 0},
	{41, 16, 0, 34, 8, 0},
	{42, 1, 0, 34, 8, 0},
	{42, 1, 1, 34, 8, 0},
	{42, 2, 0, 34, 8, 0},
	{40, 18, 0, 31, 9, 0},
	{40, 20, 0, 21, 9, 6},
	{40, 22, 0, 31, 9, 0},
	{40, 24, 0, 31, 9, 0},
	{43, 7, 0, 31, 9, 0},
	{43, 9, 0, 31, 9, 0},
	{43, 11, 0, 21, 9, 0},
	{43, 13, 0, 31, 9, 0},
	{43, 15, 0, 21, 9, 0},
	{43, 17, 0, 21, 9, 0},
	{43, 19, 0, 21, 9, 0},
	{43, 21, 0, 21, 9, 0},
	{42, 3, 0, 21, 9, 0},
	{42, 5, 0, 21, 9, 0},
	{42, 5, 1, 21, 9, 0},
	{42, 11, 0, 21, 9, 0},
	{42, 13, 0, 21, 9, 0},
	{42, 15, 0, 21, 9, 0},
	{42, 17, 0, 21, 9, 0},
	{42, 19, 0, 21, 9, 7},
	{28, 4, 0, 21, 9, 0},
	{28, 6, 0, 21, 9, 0},
	{28, 8, 0, 52, 9, 0},
	{28, 10, 0, 57, 9, 0},
	{28, 12, 0, 23, 9, 0},
	{44, 2, 0, 31, 9, 0},
	{44, 4, 0, 31, 9, 0},
	{44, 5, 0, 21, 9, 0},
	{44, 6, 0, 31, 9, 0},
	{44, 7, 0, 31, 9, 0},
	{44, 10, 0, 21, 9, 0},
	{44, 14, 0, 21, 9, 0},
	{44, 16, 0, 21, 9, 0},
	{39, 31, 0, 4, 10, 0},
	{43, 1, 0, 6, 10, 0},
	{43, 2, 0, 37, 10, 8},
	{43, 3, 0, 3, 10, 0},
	{43, 4, 0, 37, 10, 0},
	{43, 5, 0, 53, 10, 0},
	{43, 6, 0, 37, 10, 0},
	{43, 8, 0, 3, 10, 0},
	{43, 10, 0, 6, 10, 0},
	{43, 12, 0, 6, 10, 0},
	{43, 14, 0, 2, 10, 0},
	{43, 16, 0, 5, 10, 0},
	{43, 16, 1, 0, 10, 0},
	{43, 18, 0, 37, 10, 0},
	{43, 20, 0, 37, 10, 0},
	{43, 22, 0, 55, 10, 0},
	{43, 26, 0, 55, 10, 0},
	{42, 25, 0, 37, 10, 0},
	{42, 26, 0, 6, 10, 0},
	{6, 2, 0, 37, 10, 0},
	{6, 4, 0, 37, 10, 0},
	{6, 6, 0, 37, 10, 0},
	{6, 8, 0, 37, 10, 0},
	{6, 10, 0, 37, 10, 0},
	{6, 12, 0, 37, 10, 0},
	{6, 14, 0, 37, 10, 0},
	{6, 16, 0, 37, 10, 0},
	{6, 20, 0, 55, 10, 0},
	{0, 1, 0, 24, 11, 0},
	{0, 2, 0, 24, 11, 0},
	{0, 4, 0, 24, 11, 0},
	{0, 6, 0, 24, 11, 0},
	{0, 8, 0, 24, 11, 0},
	{0, 10, 0, 24, 11, 0},
	{0, 16, 0, 10, 11, 9},
	{0, 18, 0, 30, 11, 0},
	{0, 20, 0, 24, 11, 0},
	{0, 22, 0, 24, 11, 0},
	{0, 24, 0, 30, 11, 0},
	{0, 26, 0, 24, 11, 0},
	{0, 28, 0, 30, 11, 0},
	{0, 30, 0, 24, 11, 0},
	{0, 32, 0, 30, 11, 0},
	{6, 32, 0, 30, 11, 0},
	{6, 36, 0, 30, 11, 0},
	{6, 38, 0, 30, 11, 0},
	{21, 3, 0, 24, 11, 0},
	{21, 5, 0, 24, 11, 0},
	{21, 7, 0, 24, 11, 0},
	{21, 9, 0, 30, 11, 0},
	{21, 11, 0, 24, 11, 0},
	{21, 13, 0, 30, 11, 0},
	{21, 19, 0, 30, 11, 0},
	{21, 21, 0, 30, 11, 0},
	{21, 23, 0, 24, 11, 0},
	{21, 25, 0, 24, 11, 0},
	{21, 27, 0, 24, 11, 0},
	{14, 3, 0, 11, 12, 0},
	{14, 4, 0, 15, 12, 10},
	{14, 5, 0, 11, 12, 0},
	{14, 7, 0, 11, 12, 0},
	{14, 9, 0, 15, 12, 0},
	{14, 11, 0, 15, 12, 0},
	{14, 13, 0, 11, 12, 0},
	{22, 8, 0, 15, 12, 0},
	{22, 10, 0, 20, 12, 0},
	{22, 12, 0, 42, 12, 0},
	{18, 4, 0, 15, 12, 11},
	{6, 85, 0, 15, 12, 0},
	{6, 87, 0, 15, 12, 0},
	{6, 89, 0, 15, 12, 0},
	{6, 91, 0, 15, 12, 0},
	{6, 93, 0, 11, 12, 0},
	{6, 95, 0, 11, 12, 0},
	{6, 97, 0, 25, 12, 0},
	{6, 99, 0, 11, 12, 0},
	{6, 103, 0, 15, 12, 0},
	{6, 105, 0, 20, 12, 0},
	{14, 17, 0, 31, 13, 0},
	{14, 19, 0, 19, 13, 0},
	{14, 21, 0, 19, 13, 0},
	{14, 23, 0, 14, 13, 0},
	{19, 32, 0, 31, 13, 0},
	{19, 34, 0, 31, 13, 0},
	{19, 38, 0, 19, 13, 0},
	{19, 44, 0, 26, 13, 12},
	{19, 48, 0, 14, 13, 0},
	{19, 50, 0, 31, 13, 0},
	{19, 51, 0, 31, 13, 0},
	{19, 53, 0, 31, 13, 0},
	{19, 55, 0, 31, 13, 0},
	{23, 7, 0, 45, 14, 0},
	{24, 5, 0, 46, 14, 0},
	{24, 7, 0, 46, 14, 0},
	{24, 7, 1, 45, 14, 0},
	{24, 9, 0, 45, 14, 0},
	{25, 2, 0, 48, 14, 0},
	{25, 4, 1, 58, 14, 0},
	{25, 6, 0, 52, 14, 0},
	{25, 8, 0, 37, 14, 0},
	{25, 10, 0, 48, 14, 0},
	{25, 12, 0, 48, 14, 0},
	{25, 14, 0, 48, 14, 0},
	{19, 6, 0, 48, 14, 0},
	{6, 47, 1, 33, 14, 0},
	{6, 51, 0, 58, 14, 0},
	{6, 69, 0, 59, 14, 0},
	{6, 71, 0, 59, 14, 0},
	{7, 4, 0, 32, 15, 0},
	{7, 10, 0, 29, 15, 0},
	{7, 10, 1, 36, 15, 0},
	{7, 12, 0, 29, 15, 0},
	{26, 2, 0, 7, 15, 0},
	{26, 3, 0, 32, 15, 13},
	{26, 6, 0, 32, 15, 0},
	{26, 8, 0, 32, 15, 0},
	{26, 10, 0, 32, 15, 0},
	{26, 12, 0, 32, 15, 0},
	{26, 1, 1, 7, 15, 0},
	{12, 4, 0, 7, 15, 0},
	{12, 6, 0, 32, 15, 0},
	{27, 1, 0, 18, 15, 0},
	{27, 1, 1, 32, 15, 0},
	{27, 2, 1, 7, 15, 0},
	{27, 6, 0, 32, 15, 0},
	{27, 7, 0, 32, 15, 0},
	{27, 11, 0, 29, 15, 0},
	{27, 13, 0, 29, 15, 0},
	{27, 34, 0, 32, 15, 0},
	{27, 36, 0, 32, 15, 0},
	{6, 19, 0, 32, 15, 0},
	{6, 19, 1, 32, 15, 0},
	{6, 21, 0, 32, 15, 0},
	{6, 23, 0, 32, 15, 0},
	{6, 25, 0, 32, 15, 0},
	{6, 27, 0, 32, 15, 0},
	{6, 29, 0, 32, 15, 0},
	{6, 31, 0, 32, 15, 0},
	{7, 12, 1, 30, 16, 0},
	{7, 14, 0, 30, 16, 0},
	{7, 18, 0, 30, 16, 0},
	{7, 26, 0, 30, 16, 0},
	{7, 28, 0, 30, 16, 14},
	{8, 37, 0, 30, 16, 0},
	{8, 39, 0, 30, 16, 0},
	{8, 41, 0, 30, 16, 0},
	{8, 43, 0, 30, 16, 0},
	{10, 46, 0, 30, 16, 0},
	{10, 48, 0, 30, 16, 0},
	{9, 21, 0, 22, 17, 0},
	{11, 2, 0, 48, 17, 0},
	{11, 3, 0, 48, 17, 0},
	{11, 5, 0, 48, 17, 0},
	{11, 7, 0, 48, 17, 0},
	{11, 7, 1, 48, 17, 0},
	{11, 9, 0, 48, 17, 0},
	{11, 9, 1, 48, 17, 0},
	{11, 11, 0, 48, 17, 0},
	{11, 13, 0, 48, 17, 0},
	{11, 15, 0, 48, 17, 0},
	{12, 11, 0, 48, 17, 0},
	{12, 13, 0, 48, 17, 0},
	{12, 15, 0, 48, 17, 0},
	{13, 2, 0, 48, 17, 0},
	{13, 6, 0, 48, 17, 0},
	{13, 8, 0, 48, 17, 0},
	{13, 10, 0, 48, 17, 0},
	{13, 12, 0, 48, 17, 0},
	{13, 14, 0, 48, 17, 0},
	{13, 16, 0, 48, 17, 0},
	{13, 18, 0, 48, 17, 0},
	{13, 20, 0, 48, 17, 0},
	{14, 24, 0, 35, 18, 0},
	{15, 116, 0, 37, 18, 0},
	{15, 118, 0, 37, 18, 0},
	{15, 122, 0, 37, 18, 0},
	{15, 124, 0, 37, 18, 8},
	{15, 126, 0, 15, 18, 15},
	{15, 130, 0, 35, 18, 0},
	{15, 152, 0, 35, 18, 0},
	{15, 154, 0, 35, 18, 0},
	{16, 40, 0, 35, 18, 0},
	{16, 42, 0, 15, 18, 0},
	{17, 9, 0, 15, 18, 0},
	{17, 11, 0, 15, 18, 0},
	{17, 13, 0, 15, 18, 0},
	{17, 15, 0, 15, 18, 0},
	{17, 17, 0, 15, 18, 0},
	{17, 18, 0, 35, 18, 0},
	{17, 20, 0, 15, 18, 0},
	{17, 22, 0, 44, 18, 0},
	{17, 23, 0, 35, 18, 0},
	{17, 25, 0, 35, 18, 0},
	{17, 26, 0, 35, 18, 0},
	{17, 27, 0, 35, 18, 0},
	{17, 29, 0, 35, 18, 0},
	{17, 31, 0, 35, 18, 0},
	{17, 33, 0, 35, 18, 0},
	{17, 35, 0, 37, 18, 0},
	{17, 37, 0, 35, 18, 0},
	{17, 39, 0, 35, 18, 0},
	{17, 41, 0, 35, 18, 0},
	{17, 41, 1, 35, 18, 0},
	{18, 23, 0, 15, 18, 0},
	{18, 25, 0, 15, 18, 0},
	{18, 27, 0, 35, 18, 0},
	{18, 29, 0, 37, 18, 0},
	{18, 30, 0, 35, 18, 0},
	{18, 32, 0, 35, 18, 0},
	{18, 34, 0, 35, 18, 0},
	{19, 35, 0, 35, 18, 0},
	{19, 37, 0, 35, 18, 0},
	{19, 39, 0, 35, 18, 0},
	{19, 41, 0, 35, 18, 0},
	{19, 43, 0, 25, 18, 16},
	{20, 24, 0, 35, 18, 0},
	{28, 17, 0, 29, 19, 17},
	{28, 25, 0, 29, 19, 0},
	{28, 27, 0, 29, 19, 0},
	{21, 41, 0, 29, 19, 0},
	{21, 41, 1, 29, 19, 18},
	{21, 43, 0, 29, 19, 0},
	{21, 45, 0, 29, 19, 0},
	{21, 49, 0, 52, 19, 0},
	{21, 51, 0, 29, 19, 0},
	{21, 53, 0, 29, 19, 0},
	{21, 55, 0, 29, 19, 0},
	{21, 59, 0, 29, 19, 0},
	{21, 65, 0, 29, 19, 0},
	{28, 3, 0, 18, 20, 0},
	{28, 5, 0, 18, 20, 0},
	{28, 7, 0, 18, 20, 0},
	{28, 13, 0, 18, 20, 0},
	{28, 15, 0, 18, 20, 0},
	{0, 5, 0, 18, 20, 0},
	{0, 7, 0, 18, 20, 0},
	{0, 9, 0, 18, 20, 0},
	{0, 11, 0, 49, 20, 0},
	{0, 13, 0, 18, 20, 0},
	{0, 15, 0, 60, 20, 0},
	{0, 17, 0, 60, 20, 0},
	{21, 29, 0, 30, 20, 0},
	{21, 31, 0, 49, 20, 0},
	{21, 33, 1, 12, 20, 0},
	{21, 35, 0, 18, 20, 0},
	{21, 39, 0, 18, 20, 0},
	{29, 4, 0, 41, 21, 19},
	{29, 6, 0, 41, 21, 0},
	{29, 12, 0, 41, 21, 0},
	{19, 12, 1, 41, 21, 0},
	{30, 183, 0, 40, 21, 0},
	{30, 189, 0, 40, 21, 0},
	{30, 191, 0, 40, 21, 0},
	{30, 193, 0, 40, 21, 0},
	{30, 195, 0, 40, 21, 0},
	{30, 199, 0, 40, 21, 0},
	{30, 201, 0, 40, 21, 0},
	{30, 203, 0, 40, 21, 0},
	{30, 205, 0, 40, 21, 0},
	{30, 219, 0, 41, 21, 0},
	{30, 221, 0, 41, 21, 0},
	{30, 223, 0, 41, 21, 0},
	{45, 142, 0, 38, 21, 23},
	{31, 218, 0, 40, 21, 0},
	{31, 222, 0, 40, 21, 0},
	{32, 12, 0, 41, 21, 0},
	{32, 14, 0, 41, 21, 0},
	{33, 4, 0, 40, 21, 0},
	{33, 6, 0, 40, 21, 0},
	{34, 3, 0, 41, 21, 0},
	{34, 5, 0, 41, 21, 0},
	{40, 18, 1, 50, 9, 5},  // Вучетича 18а
	{1, 49, 1, 50, 5, 0},   // Пролетарская 49а
	{5, 70, 0, 50, 4, 0},   // Доценко 70
	{41, 14, 0, 49, 8, 0},  // Голубева 14
	{11, 19, 0, 24, 17, 0}, // 2-я штурманская 19
	{19, 2, 0, 37, 17, 0},  // Столетова 2
	{19, 2, 1, 37, 17, 0},  // Столетова 2а
}

//
// Новые таблицы: Users и key_is_with
//

// Пример данных для Users
var users = []struct {
	id       int
	username string
}{
	{0, "alice"},
	{1, "bob"},
}

// Пример данных для key_is_with:
// id - первичный ключ, id_username - идентификатор пользователя (из Users)
var keyIsWithData = []struct {
	id          int
	id_username int
}{
	{0, 0}, // например, ключ выдан пользователю alice
	{1, 1}, // ключ выдан bob
}

func main() {
	// Создаем базу данных bd.db
	db, err := sql.Open("sqlite3", "./bd.db")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	if err = createBD(db); err != nil {
		log.Fatal(err)
	}
	fmt.Println("База данных создана успешно!")
}

func createBD(db *sql.DB) error {
	schema := `
		CREATE TABLE IF NOT EXISTS Streets (
			id INTEGER PRIMARY KEY,
			name TEXT NOT NULL
		);

		CREATE TABLE IF NOT EXISTS Kampus (
			id INTEGER PRIMARY KEY,
			name TEXT NOT NULL
		);

		CREATE TABLE IF NOT EXISTS Comments (
			id INTEGER PRIMARY KEY,
			text TEXT
		);

		-- Таблица Keys дополнена полями status_key и key_is_with.
		CREATE TABLE IF NOT EXISTS Keys (
			id INTEGER PRIMARY KEY,
			key_value TEXT NOT NULL,
			status_key TEXT,
			key_is_with INTEGER,
			FOREIGN KEY (key_is_with) REFERENCES key_is_with(id)
		);

		CREATE TABLE IF NOT EXISTS Addresses (
			id INTEGER PRIMARY KEY,
			street_id INTEGER,
			house INTEGER,
			corpus INTEGER,
			key_id INTEGER,
			kampus_id INTEGER,
			comment_id INTEGER,
			FOREIGN KEY (street_id) REFERENCES Streets(id),
			FOREIGN KEY (key_id) REFERENCES Keys(id),
			FOREIGN KEY (kampus_id) REFERENCES Kampus(id),
			FOREIGN KEY (comment_id) REFERENCES Comments(id)
		);

		CREATE TABLE IF NOT EXISTS Users (
			id INTEGER PRIMARY KEY,
			username TEXT NOT NULL UNIQUE
		);

		CREATE TABLE IF NOT EXISTS key_is_with (
			id INTEGER PRIMARY KEY,
			id_username INTEGER,
			FOREIGN KEY (id_username) REFERENCES Users(id)
		);
	`
	_, err := db.Exec(schema)
	if err != nil {
		return fmt.Errorf("failed to create schema: %v", err)
	}

	// Вставляем данные в таблицы
	if err := insertStreets(db); err != nil {
		return err
	}
	if err := insertKampus(db); err != nil {
		return err
	}
	if err := insertComments(db); err != nil {
		return err
	}
	if err := insertKeys(db); err != nil {
		return err
	}
	if err := insertAddresses(db); err != nil {
		return err
	}
	if err := insertUsers(db); err != nil {
		return err
	}
	if err := insertKeyIsWith(db); err != nil {
		return err
	}

	return nil
}

func insertStreets(db *sql.DB) error {
	stmt, err := db.Prepare("INSERT INTO Streets(id, name) VALUES (?, ?)")
	if err != nil {
		return err
	}
	defer stmt.Close()
	for id, name := range streets {
		_, err := stmt.Exec(id, name)
		if err != nil {
			return fmt.Errorf("failed to insert street %d: %v", id, err)
		}
	}
	return nil
}

func insertKampus(db *sql.DB) error {
	stmt, err := db.Prepare("INSERT INTO Kampus(id, name) VALUES (?, ?)")
	if err != nil {
		return err
	}
	defer stmt.Close()
	for id, name := range kampus {
		_, err := stmt.Exec(id, name)
		if err != nil {
			return fmt.Errorf("failed to insert kampus %d: %v", id, err)
		}
	}
	return nil
}

func insertComments(db *sql.DB) error {
	stmt, err := db.Prepare("INSERT INTO Comments(id, text) VALUES (?, ?)")
	if err != nil {
		return err
	}
	defer stmt.Close()
	for id, text := range commentsArr {
		_, err := stmt.Exec(id, text)
		if err != nil {
			return fmt.Errorf("failed to insert comment %d: %v", id, err)
		}
	}
	return nil
}

func insertKeys(db *sql.DB) error {
	// Для Keys вставляем только базовые поля key_value; status_key и key_is_with оставляем NULL
	stmt, err := db.Prepare("INSERT INTO Keys(id, key_value) VALUES (?, ?)")
	if err != nil {
		return err
	}
	defer stmt.Close()
	for id, keyValue := range keysArr {
		_, err := stmt.Exec(id, keyValue)
		if err != nil {
			return fmt.Errorf("failed to insert key %d: %v", id, err)
		}
	}
	return nil
}

func insertAddresses(db *sql.DB) error {
	stmt, err := db.Prepare("INSERT INTO Addresses(street_id, house, corpus, key_id, kampus_id, comment_id) VALUES (?, ?, ?, ?, ?, ?)")
	if err != nil {
		return err
	}
	defer stmt.Close()
	for i, addr := range addresses {
		_, err := stmt.Exec(addr[0], addr[1], addr[2], addr[3], addr[4], addr[5])
		if err != nil {
			return fmt.Errorf("failed to insert address %d: %v", i, err)
		}
	}
	return nil
}

func insertUsers(db *sql.DB) error {
	stmt, err := db.Prepare("INSERT INTO Users(id, username) VALUES (?, ?)")
	if err != nil {
		return err
	}
	defer stmt.Close()
	for _, user := range users {
		_, err := stmt.Exec(user.id, user.username)
		if err != nil {
			return fmt.Errorf("failed to insert user %d: %v", user.id, err)
		}
	}
	return nil
}

func insertKeyIsWith(db *sql.DB) error {
	stmt, err := db.Prepare("INSERT INTO key_is_with(id, id_username) VALUES (?, ?)")
	if err != nil {
		return err
	}
	defer stmt.Close()
	for _, k := range keyIsWithData {
		_, err := stmt.Exec(k.id, k.id_username)
		if err != nil {
			return fmt.Errorf("failed to insert key_is_with %d: %v", k.id, err)
		}
	}
	return nil
}
